package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/abulwcse/go-graphql-example/entity"
	"github.com/abulwcse/go-graphql-example/graph/model"
)

// Books is the resolver for the books field.
func (r *authorResolver) Books(ctx context.Context, obj *entity.Author) ([]*entity.Book, error) {
	book := entity.Book{}
	criteria := map[string]interface{}{"authorId": obj.ID}
	return book.Find(criteria), nil
}

// Author is the resolver for the author field.
func (r *bookResolver) Author(ctx context.Context, obj *entity.Book) (*entity.Author, error) {
	author := entity.Author{}
	return author.FindByID(obj.AuthorID), nil
}

// CreateBook is the resolver for the CreateBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*entity.Book, error) {
	book := &entity.Book{
		ID:       int64(input.ID),
		Name:     input.Name,
		ISBN:     input.Isbn,
		Language: input.Language,
		AuthorID: int64(input.AuthorID),
	}
	return book.Save()
}

// CreateAuthor is the resolver for the CreateAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.NewAuthor) (*entity.Author, error) {
	author := &entity.Author{
		ID:          int64(input.ID),
		FirstName:   *input.FirstName,
		LastName:    *input.LastName,
		DateOfBirth: *input.DateOfBirth,
	}
	return author.Save()
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*entity.Book, error) {
	book := entity.Book{}
	return book.Find(nil), nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id int) (*entity.Book, error) {
	book := entity.Book{}
	return book.FindByID(int64(id)), nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*entity.Author, error) {
	author := entity.Author{}
	return author.Find(nil), nil
}

// Author returns AuthorResolver implementation.
func (r *Resolver) Author() AuthorResolver { return &authorResolver{r} }

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authorResolver struct{ *Resolver }
type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) UpdateBook(ctx context.Context, id int, input *model.NewBook) (*entity.Book, error) {
	panic(fmt.Errorf("not implemented: UpdateBook - UpdateBook"))
}
func (r *mutationResolver) UpdateAuthor(ctx context.Context, id int, input *model.NewAuthor) (*entity.Author, error) {
	panic(fmt.Errorf("not implemented: UpdateAuthor - UpdateAuthor"))
}
